#!/bin/bash --
set -o pipefail

do_build=0
do_tests=0
do_clean_tests=0
use_this_adtools=0
gcc_ver=11 # default
binutils_ver=2.23.2
SDK_VERSION=54.16
expclib2_branch=master
args=
session_prefix=
gcc_path=
CORES=$(nproc)
session_was_cached=0
ignore_depends=0

readonly ORIG_DIR="$(pwd)"
readonly ADTOOLS_DIR=adt_adtools
readonly TESTS_DIR=tests
readonly SCRIPT_INVOCATION=1
readonly RUN_ALL_SCRIPT=run_all.script
readonly EXECUTE_SCRIPT=user.script
readonly SESSION_CACHE="${ORIG_DIR}/.adt_session.cache"
BUILD_DIR=
FINAL_LHA=
BASE_DIR=
CROSS_PREFIX=
ADTOOLS_MOD_SCRIPT=

# $1: Message
function _info
{
    echo "### INFO: ${1}"
}

# $1: Message
function _warn
{
    echo "### WARN: ${1}" 1>&2
}

# $1: Message
# $2: Unique Error Code
# $3: If set to anything then also requests the user to manually remove ${BASE_DIR}
function _error
{
    echo "### GURU MEDITATION ERROR (CODE: ${2}): ${1}" 1>&2
    if [[ -n "${3}" ]]
    then
	_warn "For this error it is recommended to remove \"${BASE_DIR}\" before starting again"
    fi
    exit "${2}"
}

function generate_adt_last_proj
{
    if [[ -f "${SESSION_CACHE}" ]]
    then
	_warn "Overwriting previously cached session"
    fi
    
    cat > "${SESSION_CACHE}" <<EOF
use_this_adtools="${use_this_adtools}"
gcc_ver="${gcc_ver}"
binutils_ver="${binutils_ver}"
SDK_VERSION="${SDK_VERSION}"
expclib2_branch="${expclib2_branch}"
args="${args}"
session_prefix="${session_prefix}"
gcc_path="${gcc_path}"
EXP_CLIB2="${EXP_CLIB2}"
CLIB2_SHA1="${CLIB2_SHA1}"

export EXP_CLIB2
export CLIB2_SHA1
export SDK_VERSION
EOF

    if (( ${?} ))
    then
	_error "Unable to write to \"${SESSION_CACHE}\". See error above" 104
    fi

    session_was_cached=1
}

function obtain_adt_last_proj
{
    if [[ -f "${SESSION_CACHE}" ]]
    then
	source "${SESSION_CACHE}" && _info "Using cached settings from last invocation"
	_info ""
	_info "Settings Begin"
	while read setting
	do
	    _info ">>> ${setting}"
	done < "${SESSION_CACHE}"
	_info "Settings End"
	_info ""
    else
	_error "No previous settings were cached" 103
    fi
}

function _usage
{
    cat << EOF
Usage: adt [OPTIONS] [ACTIONS] (one, and only one, action is always required)
            where:
            OPTIONS: [-x] [ [-p <PREFIX>] | [-o <PATH>] ] [-k <NUM>] [-u] [-i]
            ACTIONS: [-b [ [-e <BRANCH>] [-g <VER>] [-n <VER>] [-s <VER>] [-m <FILE>] ] | [-t] | [ [-c] | [-C] ]
                     ^                                                                    ^      ^
                     BUILD ADTOOLS                                                        TESTS  CLEAN
       [x] cached proj: Use the variables stored from the previous build action
                        session for this action. This is useful when a complex
                        build was invoked before containing many options so
                        that they do not need to be remembered. This cache file
                        is only updated on a build action which requires a new
                        build of ADTOOLS. For example, if a build action such
                        as "-b -e beta10 -s 53.30 -g 10 -p beta10" was provided
                        then running the tests for that session is as easy as
                        "-x -t", or, making a modification to the cross
                        compiler source files and wanting to build the cross
                        compiler again is as easy as "-x -b"
       !! NOTE !!     : This option must be the first option provided
       [p] prefix     : Sets the prefix of the build, test or clean session.
                        This may be useful if you wish to build another version
                        of ADTOOLS and/or perform tests on another version. For
                        example, building an ADTOOLS with GCC 11 and building
                        the tests for it and also building another version with
                        GCC 8 which would result in two build directories and 
                        two final test LHA files, one for each version 
       !! NOTE !!     : It is important to use this option when invoking a
                        build, test or clean action so as to ensure operation
                        on the expected session/prefix. Rather than supplying
                        this option you can just set an environment variable
                        named ADTOOLS_PREFIX which will have the same effect as
                        supplying -p <PREFIX>. Alternatively, use the -x option
                        which will retrieve the previous session's settings
       [o] gcc path   : This is a deviation to the principle of this repository
                        because the idea is that everything is self-contained
                        inside the directory you have cloned this repository
                        to. But, if desired, you can supply this option with a
                        path and the cross-compiler will be installed into that
                        location. For example, -o /usr/amiga/gcc. But,
                        everything else will remain self-contained and the
                        cloning of ADTOOLS will still be self-contained only
                        the installation of the cross compiler will be put into
                        <PATH>
       !! NOTE !!     : Rather than supplying this option you can just set an
                        environment variable named ADTOOLS_GCC_PATH which will
                        have the same effect as supplying -o <PATH>.
                        Alternatively, use the -x option which will retrieve
                        the previous session's settings. Like the -p option,
                        you will need to provide this option if you want to
                        build the tests for a build of ADTOOLS that was built
                        with this option, unless the -x option is used, or the
                        variables described above are set in the environment
       [k] cores      : Number of cores/jobs to pass to Makefiles
                        (DEFAULT: the result of the command NPROC)
       [u] use_adtools: Use the ADTOOLS that is already on the existing path
                        for building the tests or use this when performing a
                        clean of a build of ADTOOLS. In the case ADTOOLS was
                        built by using the -o option, you will need to add the
                        cross-compiler to the path and then use this option
                        along with -t
       [i] ignore dep : Ignore dependency checker routine
       [b] build      : Clones and builds ADTOOLS in-place respecting the
                        additionally supplied options. The in-place location is
                        the folder named "<PREFIX>build". If the directory 
                        already exists then this script invokes a build in the
                        already existing in-place ADTOOLS without firstly 
                        performing a clean
       [e] AFXGROUP C : Enables the experimental AFXGROUP's version of the C
                        Library, CLIB2, when building in-place ADTOOLS using
                        the branch specified (DEFAULT: master)
       [g] gcc        : Selects the version of GCC to use when building
                        in-place ADTOOLS (DEFAULT: 11)
       [n] binutils   : Selects the version of BINUTILS to use when building
                        in-place ADTOOLS (DEFAULT: 2.23.2)
       [s] SDK        : Selects the version of the SDK to use when building
                        in-place ADTOOLS (DEFAULT: 54.16)
       [m] mod script : Invoke the script named <FILE> after cloning ADTOOLS
                        but before building ADTOOLS. This allows modifications
                        to things like the native-build/makefile or whatever is
                        desired before building ADTOOLS. This is only invoked
                        if the ADTOOLS repository has not yet been cloned. The
                        script should reside in the same directory as this
                        script (the adt script). There is also an example mod
                        script named "adtools_mod"
       [t] tests      : Builds all of the tests under the "tests" folder. 
                        Logging of each build of each variant is appended to
                        the log file
       [c] clean_tests: Performs a clean on all tests
       [C] clean_build: Performs a clean on the in-place ADTOOLS which will
                        also remove the built cross-compiler binaries. In the
                        case that you are using a cross-compiler outside of the
                        the self-contained directory then it is not recommended
                        to use this option without strict consideration
       *              : Any other arguments are assumed to be arguments that
                        are to be passed to the testing framework when using
                        the option "t" or the building of ADTOOLS when using the
                        the option "b". The arguments are passed in to the
                        respective makefiles
EOF
}

function SETUP_PATHS
{
    BUILD_DIR="${session_prefix}build"
    FINAL_LHA="${session_prefix}adt_tests.lha"
    BASE_DIR="${ORIG_DIR}/${BUILD_DIR}"
    CROSS_PREFIX="${BASE_DIR}/adt_build"
    # Rather than correctly applying logic above to check if the
    # gcc_path should be honoured, just perform a one-shot change to
    # the necessary variables right here!
    #
    # The -o option is a total hack and should not be used!
    if [[ -n "${gcc_path}" ]]
    then
	# Strip the / suffix off if one exists and assume that it does not have multiple trailing /
	if [[ "${gcc_path: -1}" == / ]]
	then
	    gcc_path="${gcc_path::-1}"
	fi
	if [[ -n "${session_prefix}" ]]
	then
            _error "The prefix (-p) option cannot be used in conjunction with a user defined gcc_path option (-o)" 101
	fi
	CROSS_PREFIX="${gcc_path}"
	BASE_DIR="${ORIG_DIR}/$(echo "${gcc_path}" | sed 's,/,_,g' )build"
	FINAL_LHA="$(echo "${gcc_path}" | sed 's,/,_,g' )adt_tests.lha"
    elif (( use_this_adtools ))
    then
	# For cross-compilers on the path, we will use the compiler as
	# BASE_DIR, this allows the testing framework to run the tests
	# and apply the clean_stamp rules only if clean_stamp does not
	# yet exist, or if the cross-compiler on the PATH has been
	# updated outside the context of this repo
	BASE_DIR="$(which ppc-amigaos-gcc)"
    fi
}

function CHECK_DEPENDS
{
    local _continue=1
    local _selection
    local _packages=(
	"libgmp-dev"
	"libmpc-dev"
	"libmpfr-dev"
	"bison"
	"flex"
	"texinfo"
    )
    # We print this out regardless of the package management system so
    # that in the case that dpkg is NOT being used, the user has an
    # idea of which packages to manually install
    _info "Checking for the following required packages:"
    for package in "${_packages[@]}"
    do
	_info "- ${package}"
    done
    
    if [[ ! "$(lha --version 2>&1)" =~ "LHa for UNIX version" ]]
    then
	_warn "Unexpected or no version of \"LHA\". Please use \"https://github.com/jca02266/lha\""
	_continue=0
    fi

    # Only supporting dpkg for now
    if [[ $(dpkg-query --version ) ]]
    then
	for package in "${_packages[@]}"
	do
            if [[ $(dpkg-query --showformat '${db:Status-Status}' --show "${package}" 2>/dev/null) != installed ]]
            then
		_warn "Package \"${package}\" does not seem to be installed and it is required to build ADTOOLS"
		_continue=0
            fi
	done
    else
	_warn "Prebuild dependency checking is only supported with \"dpkg\". Dependency checks ignored."
	_continue=0
    fi

    if (( !_continue ))
    then
	_info "Dependency check was not clean. Continue (y/n)?"
        read _selection
        if [[ "${_selection}" != y ]]
        then
	    _error "Not continuing due to issues with the dependency checker" 207 1
        fi
    fi
}

function BUILD
{
    if [[ ! -d "${BASE_DIR}" ]]
    then
	if (( !ignore_depends ))
	then
	    # TODO: Return a value from the function instead and raise error here
	    CHECK_DEPENDS
	fi
        local INFO_STRING="Building ADTOOLS using GCC version \"${gcc_ver}\", BINUTILS version \"${binutils_ver}\", SDK version \"${SDK_VERSION}\""
        if (( EXP_CLIB2 )) ; then INFO_STRING+=", AFXGROUP's CLIB2 branch \"${expclib2_branch}\"" ; fi
        _info "Building ADTOOLS..."
        
        mkdir "${BASE_DIR}"
        cd "${BASE_DIR}"
        git clone https://github.com/sba1/adtools.git "${ADTOOLS_DIR}" || _error "Unable to clone ADTOOLS repo" 201 1
        cd "${ADTOOLS_DIR}"
	
	# Check that the user has configured git email/username; especially
	# since ADTOOLS silently just does not apply the patches if this
	# information is not there and then binutils fails to build with someone
	# nebulous errors!
	git config user.email 1>/dev/null 2>&1 || \
	    _error "Git has no user.email configured. This will lead to errors in building ADTOOLS" 208 1
	git config user.name 1>/dev/null 2>&1 || \
	    _error "Git has no user.name configured. This will lead to errors in building ADTOOLS" 209 1

        git submodule init || _error "Unable to initialise submodules in ADTOOLS repo" 202 1
        git submodule update || _error "Unable to update submodules in ADTOOLS repo" 203 1
        gild/bin/gild checkout binutils "${binutils_ver}" || _error "Unable to clone binutils in ADTOOLS repo" 204 1
        gild/bin/gild checkout gcc "${gcc_ver}" || _error "Unable to clone gcc in ADTOOLS repo" 205 1
	
        # Performs the modification (if any) that are provided in the
        # following script
	if [[ -n "${ADTOOLS_MOD_SCRIPT}" ]]
	then
            "${ORIG_DIR}/${ADTOOLS_MOD_SCRIPT}" || _error "Modification script to ADTOOLS failed" 206 1
	fi
	
        # Clear any of these variables in the unlikely event they are set. If not, then
        # they are picked up during the building ADTOOLS and they may not point to the
        # native gcc that we just tested for before.
        export CC=
        export CFLAGS=
        export CXX=
        export CXXFLAGS=
        export CPPFLAGS=
        export AR=
        export AS=
        export LD=
        export RANLIB=
        export READELF=

	# Store this sessions settings
	generate_adt_last_proj
    else
        cd "${BASE_DIR}/${ADTOOLS_DIR}"
	local _selection=
	_info "Assuming you want to build the cross compiler"
	_info "Did you make any changes to the CLIB2 source files? (y/n)?"
	read _selection
	if [[ "${_selection}" == y ]]
	then
	    rm -f "${BASE_DIR}/${ADTOOLS_DIR}/native-build/clib2-cross-done-"*
	fi
	rm -f "${BASE_DIR}/${ADTOOLS_DIR}/native-build/gcc-cross-done-"*
    fi
    
    native_gcc=
    which gcc 1>/dev/null 2>&1
    if (( !${?} ))
    then
	native_gcc="$(gcc -dumpmachine)"
        if [[ "${native_gcc}" == "x86_64-linux-gnu" ]]
        then
            native_gcc=
        fi
    else
        native_gcc=error
    fi

    if [[ -n "${native_gcc}" ]]
    then
	if [[ "${native_gcc}" == error ]]
	then
	    _error "No native compiler exists to build ADTOOLS" 30
	else
            _warn "Native Compiler architecture is \"${native_gcc}\" which is not supported but continuing anyway"
	fi
    fi

    if [[ -n "${gcc_path}" ]]
    then
	which ppc-amigaos-gcc 1>/dev/null 2>&1 && _warn "Already found a cross compiler on the path. "\
"Since you used the -o option then this script assumes this is expected"
    fi
    
    sleep 5 # let the user at least notice if there were some messages
    
    LOG_FILE="${BASE_DIR}/adt.log"
    echo "####################" >> "${LOG_FILE}"
    echo "${INFO_STRING}" >> "${LOG_FILE}"
    echo "export EXP_CLIB2=${EXP_CLIB2}" >> "${LOG_FILE}"
    echo "export CLIB2_SHA1=${CLIB2_SHA1}" >> "${LOG_FILE}"
    if [[ -n "${ADTOOLS_MOD_SCRIPT}" ]]
    then
	echo "ADTOOLS was modified with script \"${ADTOOLS_MOD_SCRIPT}\" whose contents, indented by 4 spaces, follows:" >> "${LOG_FILE}"
	while read line
	do
	    echo "    ${line}" >> "${LOG_FILE}"
	done < "${ORIG_DIR}/${ADTOOLS_MOD_SCRIPT}"
    fi
    BUILD_CMD="CROSS_PREFIX=\"${CROSS_PREFIX}\" ${args} make -O -j${CORES} -C native-build/ gcc-cross 2>&1 | "\
"tee -a \"${LOG_FILE}\""
    echo "####################" >> "${LOG_FILE}"
    echo "RUNNING COMMAND: ${BUILD_CMD}" >> "${LOG_FILE}"
    echo "####################" >> "${LOG_FILE}"
    eval "${BUILD_CMD} || _error \"The ADTOOLS build failed. See the log file: \"${LOG_FILE}\"\" 40"

    # Update the timestamp so that the test framework knows whether it should rebuild the tests.
    # Of course, this dir will be touched even if there was nothing to update in ADTOOLS.
    touch "${BASE_DIR}"

    _info "Finished building ADTOOLS..."
    local _cloneLoc="${BASE_DIR}/${ADTOOLS_DIR}"
    if [[ -n "${gcc_path}" ]]
       _cloneLoc="${BASE_DIR}"
    fi
    _info "Your build directory (where the ADTOOLS repository and its source was cloned to) is: \"${_cloneLoc}\""
    _info "Your installation directory (where the cross compiler was INSTALLED to) is: \"${CROSS_PREFIX}\""
}

function TESTS
{
    # Arbitrary check
    which ppc-amigaos-gcc 1>/dev/null 2>&1 || _error "Expected to find the cross-compiler on the path."\
" You may have forgotten to set the prefix with option -p or build the cross compiler or specify the -u option" 50

    _info "Building tests..."
    _info "You MUST run \"./adt -c\" if you want to generate a full clean test build"
    _info "Using cross-compiler: $(which ppc-amigaos-gcc)"
    _info "If errors occur the look at the relevant log file in the test directory"
    ${args} make -s -C "${TESTS_DIR}" all || _error "An error occurred while trying to build the tests" 120
    _info "Finished building tests..."
    _info "\"${FINAL_LHA}\" can be copied to an AmigaOne machine. Extract it and run: \"execute run_all.script\"."
    _info "By default, the script extracts everything, appropriately, and executes a script, \"user.script\""
    _info "which acts on each variant but is commented out. The \"run_all.script\" is designed to be re-run again."
    _info "Alternatively, copy over the individual test/variant LHA"
}

if (( $# == 0 ))
then
    _usage
    _error "No options provided" 10
fi

seen_non_x_opt=0
while getopts xp:o:k:uibeg:n:s:m:tcC opt
do
    if [[ "${opt}" != x ]] ; then seen_non_x_opt=1 ; fi
    case "${opt}" in
    x)
	if (( seen_non_x_opt ))
	then
	    # This allows options from the cache file to be further overriden
	    _error "-x must be the first option to this script" 102
	fi
	obtain_adt_last_proj
	;;
    p)
        session_prefix="${OPTARG}"
        ;;
    o)
        gcc_path="${OPTARG}"
        ;;
    k)
        CORES="${OPTARG}"
        ;;
    u)
        use_this_adtools=1
        ;;
    i)
	ignore_depends=1
	;;
    b)
        do_build=1
        ;;
    e)
        export EXP_CLIB2=1
        next="${!OPTIND}"
        if [[ -n "${next}" && "${next}" != -* ]] ; then
            OPTIND=$((OPTIND + 1))
            expclib2_branch="${next}"
        fi
        export CLIB2_SHA1="${expclib2_branch}"
        ;;
    g)
        gcc_ver="${OPTARG}"
        ;;
    n)
        binutils_ver="${OPTARG}"
        ;;
    s)
        SDK_VERSION="${OPTARG}"
        ;;
    m)
	ADTOOLS_MOD_SCRIPT="${OPTARG}"
	;;
    t)
        do_tests=1
        ;;
    c)
        do_clean_tests=1
        ;;
    C)
        do_clean_build=1
        ;;
    *)
        args="${args} ${OPTARG}"
        ;;
    esac
done

# Check for any influention environment variables before continuing
if [[ -n "${ADTOOLS_PREFIX}" ]]
then
    session_prefix="${ADTOOLS_PREFIX}"
fi
if [[ -n "${ADTOOLS_GCC_PATH}" ]]
then
    gcc_path="${ADTOOLS_GCC_PATH}"
fi

SETUP_PATHS

if (( do_build && do_tests ))
then
    _error "Building the tests and building ADTOOLS is mutually exclusive" 20
fi
if (( !do_build && !do_tests && !do_clean_tests && !do_clean_build ))
then
    _error "No action performed" 80
fi
if (( !do_clean_tests && !do_clean_build ))
then
    if (( use_this_adtools ))
    then
	this_adtools="$(dirname $(which ppc-amigaos-gcc) 2>/dev/null)"
	if [[ -z "${this_adtools}" ]]
	then
	    _error "Desired ADTOOLS cross-compiler not found on PATH" 70
	fi
	CROSS_PREFIX="${this_adtools}/../"
    else
	# unless we are using the deviation -o option!
	if [[ -z "${gcc_path}" ]]
	then
	    which ppc-amigaos-gcc 1>/dev/null 2>&1 && \
		_warn "Did not expect to find a cross-compiler on the path"
	fi
    fi
fi
if (( use_this_adtools ))
then
    FINAL_LHA="$(echo "$(dirname $(which ppc-amigaos-gcc))" | sed 's,/,_,g' )${FINAL_LHA}"
fi

# Variables that are used further on in the testing framework
export BASE_DIR
export ADTOOLS_DIR
export ORIG_DIR
export SCRIPT_INVOCATION
export FINAL_LHA
export RUN_ALL_SCRIPT
export EXECUTE_SCRIPT
export CROSS_PREFIX
export SDK_VERSION
export PATH="${CROSS_PREFIX}/bin:${PATH}"

if (( do_clean_tests ))
then
    make -s -C "${TESTS_DIR}" clean
    _info "Test cases have been cleaned. You may still want to delete the final LHA file manually"
fi
if (( do_clean_build ))
then
    if (( use_this_adtools ))
    then
	this_adtools="$(dirname $(which ppc-amigaos-gcc) 2>/dev/null)"
	if (( $? ))
	then
	    _error "Desired ADTOOLS cross-compiler not found on PATH" 71
	fi
	CROSS_PREFIX="${this_adtools}/../"
    fi
    _selection=
    _info "Will perform a make clean in \"${BASE_DIR}/${ADTOOLS_DIR}/native-build\" with CROSS_PREFIX set to \"${CROSS_PREFIX}\""
    _info "This will mean that the directory \"${CROSS_PREFIX}\" will be deleted"
    _warn ""
    _warn "THIS IS POTENTIALLY A VERY DANGEROUS OPTION. READ THE INFORMATION ABOVE"
    _warn ""
    _info "Are you sure you want to continue (YES/n)?"
    read _selection
    if [[ "${_selection}" == YES ]]
    then
        make clean -C "${BASE_DIR}/${ADTOOLS_DIR}/native-build"
    else
	_info "No action taken"
    fi
fi

if (( do_build )) ; then BUILD ; fi
if (( do_tests)) ; then TESTS ; fi

if (( session_was_cached )) ;
then
    _info "Session was cached to file \"${SESSION_CACHE}\". You may want to backup this file since "\
"it will be overwritten on any subsequent NEW builds"
fi
