#!/bin/bash --
set -o pipefail

do_build=0
do_tests=0
do_clean_tests=0
use_this_adtools=0
args=


readonly ORIG_DIR="$(pwd)"
readonly BUILD_DIR=build
readonly TESTS_DIR=tests
readonly ADTOOLS_DIR=4afx_adtools
readonly SCRIPT_INVOCATION=1
readonly FINAL_LHA=4afx_tests.lha
readonly RUN_ALL_SCRIPT=run_all.script
readonly EXECUTE_SCRIPT=user.script
BASE_DIR="${ORIG_DIR}/${BUILD_DIR}"
CROSS_PREFIX="${BASE_DIR}/4afx_build"

function _error
{
    echo "### ERROR: ${1}" 1>&2
    exit "${2}"
}

function _warn
{
    echo "### WARN: ${1}" 1>&2
}

function _info
{
    echo "### INFO: ${1}"
}

function _usage
{
    cat << EOF
Usage: ${0} [b|c|t|u]
       [b] build      : Clones and builds ADTOOLS performing the following
                        modifications:
                        - Clones ADTOOLS using GCC 11, AFXGROUP's CLIB2
                          repository, and BINTUILS 2.23.2, then,
                        - Copies over the linker script provided in AFXGROUP's
                          CLIB2 repository to the GCC download
                        - Forces the removal of -Werror during the building of
                          AFXGROUP's CLIB2.
                        - Enables the generation of Shared Objects of AFGROUP's
                          CLIB2
                        The cloning and building of ADTOOLS all happen in the
                        directory named "${BUILD_DIR}". If the directory
                        already exists then this script invokes a build in
                        ADTOOLS without cleaning first and does not invoke the
                        ADTOOLS modification script. In either case, this
                        script then exits
       [c] clean_tests: Performs a cleaning on all tests and then exits
       [t] tests      : Builds all of the tests under the "${TESTS_DIR}" folder
                        and then exits
       [u] use_adtools: Use the ADTOOLS that is already on the existing path.
                        This script will not attempt to build ADTOOLS in-place
                        and will assume that the current ppc-amigaos-gcc is the
                        cross-compiler of choice. It does not make sense to set
                        this option in combination with the option "b". This
                        option is required when a different cross-compiler is
                        desired for running the tests. It only makes sense to
                        use this option in combination with option "t"
       *              : Any other arguments are assumed to be arguments that
                        are to be passed to the testing framework when using
                        the option "t" or the building of ADTOOLS when using the
                        the option "b"
EOF
}

function BUILD
{
    if [[ ! -d "${BASE_DIR}" ]]
    then
	mkdir "${BASE_DIR}"
	cd "${BASE_DIR}"
	git clone https://github.com/sba1/adtools.git "${ADTOOLS_DIR}"
	cd "${ADTOOLS_DIR}"

	git submodule init
	git submodule update
	gild/bin/gild checkout binutils 2.23.2
	gild/bin/gild checkout gcc 11

	# Performs the modification (if any) that are provided in the
	# following script
	"${ORIG_DIR}"/adtools_mod || _error "Modification script to ADTOOLS failed" 60

	BUILD
	# Clear any of these variables in the unlikely event they are set. If not, then
	# they are picked up during the building ADTOOLS and they may not point to the
	# native gcc that we just tested for before.
	export CC=
	export CFLAGS=
	export CXX=
	export CXXFLAGS=
	export CPPFLAGS=
	export AR=
	export AS=
	export LD=
	export RANLIB=
	export READELF=
    else
	cd "${BASE_DIR}/${ADTOOLS_DIR}"
    fi
    
    native_gcc_error=0
    which gcc 1>/dev/null 2>&1
    if (( !${?} ))
    then
	if [[ $(gcc -dumpmachine) != "x86_64-linux-gnu" ]]
	then
	    native_gcc_error=1
	fi
    else
	native_gcc_error=1
    fi

    if (( native_gcc_error ))
    then
	_error "Expected native linux x86-64 gcc compiler to be accessible" 30
    fi

    if [[ -z ${CORES} ]]
    then
	CORES=$(nproc)
    fi
    if [[ -z ${CORES} ]] ; then CORES=1 ; fi

    LOG_FILE="${BASE_DIR}/4afx.log"
    BUILD_CMD="CROSS_PREFIX=\"${CROSS_PREFIX}\" EXP_CLIB2=1 ${args} make -O -j${CORES} -C native-build/ gcc-cross 2>&1 | tee -a \"${LOG_FILE}\""
    echo "####################" > "${LOG_FILE}"
    echo "RUNNING COMMAND: ${BUILD_CMD}" >> "${LOG_FILE}"
    echo "####################" >> "${LOG_FILE}"
    eval "${BUILD_CMD} || _error \"The ADTOOLS build failed. See the log file: \"${LOG_FILE}\"\" 40"

    # Update the timestamp so that the test framework knows whether it should rebuild the tests.
    # Of course, this dir will be touched even if there was nothing to update in ADTOOLS.
    touch "${BASE_DIR}"
}

function TESTS
{
    # Arbitrary check
    which ppc-amigaos-gcc 1>/dev/null 2>&1 || _error "Expected to find the cross-compiler on the path." 50

    _info "Building tests"

    _info "Using cross-compiler: $(which ppc-amigaos-gcc)"

    ${args} make -s -C "${TESTS_DIR}" all

    _info "Generating artifacts:"
    find "${TESTS_DIR}/" -name "*.lha" | sort
    _info "Creating the final LHA"
    _info "\"${FINAL_LHA}\" can be copied to an AmigaOne machine. Extract it and run: \"execute run_all.script\"."
    _info "By default, the script extracts everything, appropriately, and executes a script, \"user.script\""
    _info "which acts on each variant but is commented out. The \"run_all.script\" is designed to be re-run again"
}

if (( $# == 0 ))
then
    _usage
    _error "No options provided" 10
fi

while getopts bctu opt
do
    case ${opt} in
	b)
	    do_build=1
	    ;;
	c)
	    do_clean_tests=1
	    ;;
	t)
	    do_tests=1
	    ;;
	u)
	    use_this_adtools=1
	    ;;
	*)
	    args="${args} ${OPTARG}"
	    ;;
    esac
done

if (( do_build && do_tests ))
then
    _error "Building the tests and building ADTOOLS is mutually exclusive" 20
fi
if (( do_build && use_this_adtools ))
then
    _error "Request to build ADTOOLS in-place, yet provided with alternate ADTOOLS" 80
fi
if (( !do_build && !do_tests && !do_clean_tests ))
then
    _warn "No action performed"
    exit 0
fi
if (( !do_clean_tests ))
then
   if (( use_this_adtools ))
   then
       this_adtools="$(dirname $(which ppc-amigaos-gcc))"
       if (( $? ))
       then
	   _error "ADTOOLS cross-compiler not found on PATH" 70
       fi
       CROSS_PREFIX="${this_adtools}/../"
       BASE_DIR=
   else
       which ppc-amigaos-gcc 1>/dev/null 2>&1 \
	   && _error "Did not expect to find a cross-compiler on the path" 90
   fi
fi
   
# Variables that are used further on in the testing framework
export BASE_DIR
export SCRIPT_INVOCATION
export FINAL_LHA
export RUN_ALL_SCRIPT
export EXECUTE_SCRIPT
export CROSS_PREFIX
export PATH="${CROSS_PREFIX}/bin:${PATH}"

if (( do_clean_tests ))
then
    make -s -C "${TESTS_DIR}" clean
    exit 0
fi
if (( do_build )) ; then BUILD ; fi
if (( do_tests)) ; then TESTS ; fi
