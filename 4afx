#!/bin/bash --
set -o pipefail

ORIG_DIR="$(pwd)"
# Used in the Makefile testing framework
export BASE_DIR="$(pwd)/build"
export CROSS_PREFIX="${BASE_DIR}"/4afx/4afx_build
export SCRIPT_INVOCATION=1 # tell the Makefiles that they were executed from the script

function _error
{
    echo ""
    echo "#####"
    echo "ERROR: ${1}" 1>&2
    echo "#####"
    exit "${2}"
}

function _warn
{
    echo ""
    echo "#####"
    echo "WARN: ${1}" 1>&2
    echo "#####"
}

function _info
{
    echo ""
    echo "#####"
    echo "INFO: ${1}"
    echo "#####"
}

# No getopts for now!
if (( $# > 0 ))
then
    if [[ "${1}" == -h || "${1}" == --help ]]
    then
	echo "Usage: ${0} [build|delete|test_clean]"
	echo "       build:      Invokes MAKE in ADTOOLS. Expects \"${BASE_DIR}\" to exist already. Quits"
	echo "       delete:     Removes \"${BASE_DIR}\". Quits"                                       
	echo "       test_clean: Cleans all the tests. Quits"                                          
	echo "       *:          All other options are assumed to be arguments that will be passed to "
	echo "                   the parent test makefile"
	echo "---------------------------------------------------------------------------------------"
	echo "       Note:       No option will clone ADTOOLS, build it and run the tests and then quit"
	echo "                   unless \"${BASE_DIR}\" already exists in which case all tests are built."
	echo ""
	echo "                   See the README.md file"
	echo "---------------------------------------------------------------------------------------"
	exit 0
    elif [[ "${1}" == "delete" ]]
    then
	rm -rf "${BASE_DIR}"
	exit 0
    elif [[ "${1}" == "test_clean" ]]
    then
	make -C tests clean
	exit 0
    fi
fi

function BUILD
{
    if [[ -z ${CORES} ]]
    then
	CORES=$(nproc)
    fi
    if [[ -z ${CORES} ]] ; then CORES=1 ; fi

    EXP_CLIB2=1  make -O -j${CORES} -C native-build/ gcc-cross  2>&1 | tee "${BASE_DIR}"/4afx/4afx.log \
	|| _error "The compilation failed. See the log file: \"${BASE_DIR}\"/4afx/4afx.log" 40

    # Update the timestamp so that the test framework knows whether it should rebuild the tests.
    # Of course, this dir will be touched even if there was nothing to update in ADTOOLS.
    touch "${BASE_DIR}"
}

###
# Step 0: clone ADTOOLS for use with afxgroup CLIB2, build for 11.3 GCC and 2.23.2 binutils
###
which ppc-amigaos-gcc  && _error "Remove existing ADTOOLS from your current path" 10 ;
###
# Step 0.1: ensure that GCC at least exists on the machine running this script
#           and check the environment
###
native_gcc_error=0
which gcc 1>/dev/null 2>&1
if (( !${?} ))
then
    if [[ $(gcc -dumpmachine) != "x86_64-linux-gnu" ]]
    then
	native_gcc_error=1
    fi
else
    native_gcc_error=1
fi
   
if (( native_gcc_error ))
then
    _error "Expected native linux x86-64 gcc compiler to be accessible" 11
fi

# Clear any of these variables in the unlikely event they are set. If not, then
# they are picked up during the building ADTOOLS and they may not point to the
# native gcc that we just tested for before.
export CC=
export CFLAGS=
export CXX=
export CXXFLAGS=
export CPPFLAGS=
export AR=
export AS=
export LD=
export RANLIB=

###
# End Step 0.1
###

if (( $# >= 1 ))
then
    _info "All other arguments will be passed to tests/Makefile"
fi

if [[ ! -d "${BASE_DIR}" ]]
then
   mkdir "${BASE_DIR}"
   cd "${BASE_DIR}"
   mkdir 4afx
   cd 4afx
   git clone https://github.com/sba1/adtools.git 4afx_adtools
   cd 4afx_adtools

   git submodule init
   git submodule update
   gild/bin/gild checkout binutils 2.23.2
   gild/bin/gild checkout gcc 11

   # We shall use the rs6k amigaos.h version from the afxgroup CLIB2
   sed -i '115i\	cp downloads/clib2/misc/amigaos.h ../gcc/repo/gcc/config/rs6000/' native-build/makefile
   # And, we need to remove -Werror when building clib2 due to time cast issue
   sed -i '115i\	sed -i "s|-Werror|# -Werror|g" downloads/clib2/GNUmakefile.os4' native-build/makefile
   # We also want to build SHARED LIBRARIES for CLIB2
   sed -i 's|SHARED=no|SHARED=yes|' native-build/makefile

   BUILD
else
    if [[ "${1}" == "build" ]]
    then
	cd "${BASE_DIR}/4afx/4afx_adtools" || \
	    _error "Requested a build but there is no directory named \"${BASE_DIR}\". Rerun with out the \"build\" argument" 20
	BUILD

	exit 0
    else
	_info "\"${BASE_DIR}\" already exists, assuming that you just want to re-run the tests"
    fi
fi

cd "$ORIG_DIR"
###
# Step 1: Run some test programs
###
export PATH="${BASE_DIR}"/4afx/4afx_build/bin:"${PATH}"
# Arbitrary check
which ppc-amigaos-gcc 1>/dev/null 2>&1 || _error "Expected to find the cross GCC compiler on the path" 30

_info "Running tests in $(pwd)/tests. See log (log*.txt) files for details"

make -C tests all "$@" || \
    _warn "A failure occurred during the building of the tests but artifacts were still created where possible"

for test_dir in $(ls -d tests/*/)
do
    name=$(basename "${test_dir}")
    ls "${test_dir}"/*.lha 1>/dev/null 2>&1 || _warn "No LHA artifact was found for test: \"${name}\""
done

_info "The following test artifacts can be transferred to the AmigaOne. "\
"Dynamic tests should include the necessary Shared Objects inside the LHA "\
"file and since ELF.LIBRARY will search in the directory of the program in "\
"preference then the current environment of the AmigaOne should have no "\
"effect"

find tests/ -name "*.lha" | sort

exit 0
